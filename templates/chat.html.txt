<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
<title>Chat</title>

<!-- Favicons -->
<link rel="apple-touch-icon" sizes="180x180" href="{{ url_for('static', filename='apple-touch-icon.png') }}">
<link rel="icon" type="image/png" sizes="32x32" href="{{ url_for('static', filename='favicon-32x32.png') }}">
<link rel="icon" type="image/png" sizes="16x16" href="{{ url_for('static', filename='favicon-16x16.png') }}">
<link rel="icon" type="image/x-icon" href="{{ url_for('static', filename='favicon.ico') }}">
<link rel="manifest" href="{{ url_for('static', filename='site.webmanifest') }}">

<style>
:root { --accent: #007bff; --bg: #f4f6f9; --card: #fff; --muted: #666; }
* { box-sizing:border-box; }
body { font-family: Arial, sans-serif; background: var(--bg); margin: 0; display: flex; flex-direction: column; height: 100vh; font-size: 15px; color: #222; overflow: hidden; }

/* Header */
header { background-color: var(--accent); color: #fff; padding: 12px 18px; display: flex; justify-content: space-between; align-items: center; }
header h1 { margin:0; font-size:1.15rem; }
header a { color:#fff; text-decoration:none; font-weight:600; font-size:0.95rem; }

/* Layout */
main { flex:1; display:flex; overflow:hidden; gap:10px; padding:10px; }

/* Users */
.users { width:230px; background: var(--card); border-radius:10px; padding:12px; overflow-y:auto; border:1px solid #d0d6db; }
.users h3 { margin:0 0 12px; font-size:1rem; }
.user { display:flex; align-items:center; justify-content:space-between; margin-bottom:12px; padding:6px; border-radius:6px; }
.user:hover { background:#f7f9fb; }
.user-info { display:flex; align-items:center; gap:8px; }
.user img { width:38px; height:38px; border-radius:50%; object-fit:cover; }
.status-dot { width:10px; height:10px; border-radius:50%; display:inline-block; }
.status-dot.online { background-color:#28a745; }
.status-dot.offline { background-color:#dc3545; }

/* Chat window */
.chat-window { flex:1; display:flex; flex-direction:column; background:transparent; }
.messages { flex:1; overflow-y:auto; padding:10px; border-radius:10px; }
.message { margin-bottom:12px; display:flex; align-items:flex-start; opacity:0; transform:translateY(8px); transition: all 0.2s ease; }
.message.show { opacity:1; transform:translateY(0); }
.message.private .content { border:2px dashed #ff9800; background:#fff8e1; }
.message img.avatar { width:38px; height:38px; border-radius:50%; margin-right:10px; object-fit:cover; }
.message .content { background: var(--card); padding:9px 11px; border-radius:10px; max-width:78%; box-shadow: 0 1px 3px rgba(0,0,0,0.05); }
.message .username { font-weight:700; margin-bottom:4px; font-size:0.95rem; }
.message .content img { max-width:100%; margin-top:6px; border-radius:6px; }

/* Form send */
.form-row { display:flex; gap:8px; padding:8px; align-items:center; background:#fff; border-radius:8px; border:1px solid #d0d6db; margin-top:8px; }
.form-row input[type="text"]{ flex:1; padding:9px; border-radius:6px; border:1px solid #ccc; font-size:0.95rem; }
.form-row input[type="file"]{ font-size:0.85rem; }
.form-row button{ padding:9px 14px; border-radius:6px; border:none; background:var(--accent); color:#fff; cursor:pointer; font-weight:600; font-size:0.95rem; }
.form-row button:active{ transform:translateY(1px); }

/* Avatar form */
.avatar-form { margin-top:10px; display:flex; gap:8px; align-items:center; }

/* Mobile adjustments */
@media(max-width:800px){
    body{ font-size:13px; }
    main{ flex-direction:column; padding:8px; gap:8px; }
    .users{ width:100%; order:2; display:flex; overflow-x:auto; gap:6px; padding:6px; align-items:center; }
    .users .user{ min-width:90px; flex-direction:column; align-items:center; gap:4px; padding:4px; }
    .users img{ width:32px; height:32px; }
    .chat-window{ order:1; height: calc(100vh - 180px); }
    .messages{ padding:6px; max-height: calc(100vh - 250px); }
    .message img.avatar{ width:32px; height:32px; margin-right:6px; }
    .message .username{ font-size:0.85rem; }
    .message .content{ padding:6px 8px; border-radius:8px; }
    .form-row{ flex-direction:column; gap:6px; padding:6px; position:sticky; bottom:0; background:#fff; border-radius:8px; border:1px solid #d0d6db; }
    .form-row input[type="text"], .form-row input[type="file"], .form-row button{ width:100%; font-size:13px; padding:6px; }
    .avatar-form{ margin-top:6px; gap:6px; flex-wrap:wrap; }
}
</style>
</head>
<body>

<header>
<h1>Chat</h1>
<a href="{{ url_for('logout') }}">Déconnexion</a>
</header>

<main>
<!-- Users -->
<div class="users" id="user-list">
<h3>Utilisateurs</h3>
{% for user in users %}
<div class="user" data-username="{{ user.username }}">
    <div class="user-info">
        <img src="{{ profiles[user.username] }}" alt="Avatar" onerror="this.onerror=null;this.src='/static/avatars/default-avatar.png';">
        <span>{{ user.username }}</span>
    </div>
    <span class="status-dot {% if user.online %}online{% else %}offline{% endif %}"></span>
</div>
{% endfor %}
<form class="avatar-form" method="POST" enctype="multipart/form-data" action="{{ url_for('upload_avatar') }}">
<input type="file" name="avatar" accept="image/*" required>
<button type="submit">Changer Avatar</button>
</form>
</div>

<!-- Chat -->
<div class="chat-window">
<div class="messages" id="chat-box">
{% for msg in messages %}
{% if not msg.recipient_id or msg.user_id == current_user.id or msg.recipient_id == current_user.id %}
<div class="message show {% if msg.recipient_id %}private{% endif %}">
<img src="{{ profiles[msg.username] }}" class="avatar" alt="Avatar" onerror="this.onerror=null;this.src='/static/avatars/default-avatar.png';">
<div class="content">
<div class="username">{{ msg.username }}{% if msg.recipient_id %} (Privé){% endif %}</div>
{% if msg.text %}<div>{{ msg.text }}</div>{% endif %}
{% if msg.image %}<img src="{{ msg.image }}" alt="Image envoyée">{% endif %}
<div style="font-size:0.78em;color:#666;margin-top:6px;">{{ msg.timestamp.strftime("%Y-%m-%d %H:%M:%S") }}</div>
</div>
</div>
{% endif %}
{% endfor %}
</div>

<form class="form-row" id="chat-form" method="POST" enctype="multipart/form-data" action="{{ url_for('chat') }}">
<input type="text" name="text" id="text" placeholder="Écrire un message... (@pseudo pour privé)">
<input type="file" name="image" accept="image/*">
<button type="submit">Envoyer</button>
</form>
</div>
</main>

<div class="online-notif" id="notif" style="display:none;"></div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>
const socket = io();
const chatBox = document.getElementById('chat-box');
const form = document.getElementById('chat-form');
const notif = document.getElementById('notif');
const userListEl = document.getElementById('user-list');
const avatarForm = userListEl.querySelector('.avatar-form');

function addMessage(data){
    const div = document.createElement('div');
    div.className = 'message';
    if(data.private) div.classList.add('private');
    const safeAvatar = data.avatar || '/static/avatars/default-avatar.png';
    const safeUsername = (data.username || 'Anonyme').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    const safeText = data.text ? data.text.replace(/</g,'&lt;').replace(/>/g,'&gt;') : '';
    const timestamp = data.timestamp || '';
    div.innerHTML = `
        <img src="${safeAvatar}" class="avatar" alt="Avatar" onerror="this.onerror=null;this.src='/static/avatars/default-avatar.png';">
        <div class="content">
            <div class="username">${safeUsername}${data.private ? " (Privé)" : ""}</div>
            ${safeText ? `<div>${safeText}</div>` : ''}
            ${data.image ? `<img src="${data.image}" alt="Image envoyée">` : ''}
            <div style="font-size:0.78em;color:#666;margin-top:6px;">${timestamp}</div>
        </div>`;
    chatBox.appendChild(div);
    setTimeout(()=> div.classList.add('show'), 20);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function rebuildUserList(users){
    const avatar = avatarForm;
    userListEl.innerHTML = '<h3>Utilisateurs</h3>';
    users.forEach(u => {
        const d = document.createElement('div');
        d.className = 'user';
        d.dataset.username = u.username;
        d.innerHTML = `
        <div class="user-info">
            <img src="${u.avatar || '/static/avatars/default-avatar.png'}" alt="Avatar" onerror="this.onerror=null;this.src='/static/avatars/default-avatar.png';">
            <span>${u.username}</span>
        </div>
        <span class="status-dot ${u.online ? 'online':'offline'}"></span>`;
        userListEl.appendChild(d);
    });
    if(avatar) userListEl.appendChild(avatar);
}

function showNotification(msg){
    notif.textContent = msg;
    notif.style.display='block';
    notif.classList.add('show');
    setTimeout(()=>{ notif.classList.remove('show'); notif.style.display='none'; }, 2200);
}

socket.on('connect', ()=>{ socket.emit('request_user_list'); });
socket.on('new_message', addMessage);
socket.on('avatar_updated', function(data){
    document.querySelectorAll(`.user[data-username='${data.username}'] img`).forEach(img => img.src=data.new_avatar);
    document.querySelectorAll('.message .username').forEach(el=>{
        if(el.textContent && el.textContent.includes(data.username)){
            const avatarEl = el.parentElement.previousElementSibling;
            if(avatarEl) avatarEl.src = data.new_avatar;
        }
    });
    showNotification(`${data.username} a changé son avatar`);
});
socket.on('status_update', function(data){
    const el = document.querySelector(`.user[data-username='${data.username}'] .status-dot`);
    if(el){ el.className='status-dot ' + (data.status==='online'?'online':'offline'); showNotification(`${data.username} est maintenant ${data.status}`); }
    else socket.emit('request_user_list');
});
socket.on('user_list_update', rebuildUserList);
setInterval(()=>{ socket.emit('ping_status'); }, 20000);

form.addEventListener('submit', function(e){
    e.preventDefault();
    const formData = new FormData(form);
    fetch("{{ url_for('chat') }}", { method:"POST", body:formData })
    .then(resp=>{ if(!resp.ok) console.error('Erreur envoi message', resp.status); form.reset(); })
    .catch(console.error);
});
</script>
</body>
</html>

